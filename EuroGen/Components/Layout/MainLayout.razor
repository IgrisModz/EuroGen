@inherits LayoutComponentBase

@inject NavigationManager Navigation
@inject ThemeService ThemeService
@inject LocalizationService Localizer
@inject DrawService DrawService

<style>
    .fixed-progress {
    position: fixed;
    left: 0;
    width: 100%;
    z-index: 1000; /* Au-dessus des autres éléments */
    }
</style>

<MudThemeProvider @ref="@_mudThemeProvider" Theme="_mudTheme" IsDarkMode=@ThemeService.IsDarkMode />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="4">
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudIconButton Icon="@Icons.Material.Filled.Notes" Class="mr-2" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle" />
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudButton StartIcon="@Icons.Material.Filled.Draw"
            Color="Color.Inherit"
            Style="@($"text-transform:none;")"
            Class="@(IsActive("/") ? "mud-chip-text mud-chip-color-primary" : "")"
            OnClick="@(() => GoTo("/"))">@Localizer["Draws"]</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.DataExploration"
            Color="Color.Inherit"
            Style="@($"text-transform:none;")"
            Class="@($"{(IsActive("/stats") ? "mud-chip-text mud-chip-color-primary" : "")} ml-2")"
            OnClick="@(() => GoTo("/stats"))">@Localizer["Stats"]</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Description"
            Color="Color.Inherit"
            Style="@($"text-transform:none;")"
            Class="@($"{(IsActive("/about") ? "mud-chip-text mud-chip-color-primary" : "")} mx-2")"
            OnClick="@(() => GoTo("/about"))">@Localizer["About"]</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.Settings"
            Color="Color.Inherit"
            Style="@($"text-transform:none;")"
            Class="@(IsActive("/settings") ? "mud-chip-text mud-chip-color-primary" : "")"
            OnClick="@(() => GoTo("/settings"))">@Localizer["Settings"]</MudButton>
        </MudHidden>
    </MudAppBar>
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudDrawer @bind-Open="@_isDrawerOpen"
        Elevation="0"
        ClipMode="@DrawerClipMode.Docked"
        Variant="@DrawerVariant.Responsive"
        Breakpoint="Breakpoint.Lg">
            <MudDrawerHeader>
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle" />
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Draw">@Localizer["Draws"]</MudNavLink>
                <MudNavLink Href="/stats" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.DataExploration">@Localizer["Stats"]</MudNavLink>
                <MudNavLink Href="/about" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Description">@Localizer["About"]</MudNavLink>
                <MudNavLink Href="/settings" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Settings">@Localizer["Settings"]</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
    </MudHidden>
    <MudMainContent>
        @if (DrawService.IsLoading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="fixed-progress" />
        }
        <MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
            @Body
        </MudContainer>
        <MudScrollToTop>
            <MudFab Style="opacity:.8"
            Color="Color.Primary"
            Size="Size.Medium"
            StartIcon="@Icons.Material.Filled.KeyboardArrowUp" />
        </MudScrollToTop>
    </MudMainContent>
</MudLayout>

@code {
    private bool _isDrawerOpen = false;
    private MudThemeProvider? _mudThemeProvider;

    private readonly MudTheme _mudTheme = new()
        {
            PaletteLight = new PaletteLight()
            {
                Background = Colors.Gray.Lighten5,
                AppbarBackground = Colors.Gray.Lighten5,
                DrawerBackground = Colors.Gray.Lighten5,
                AppbarText = Colors.Shades.Black,
                Surface = Colors.Gray.Lighten5,
                Primary = "#0D1F6F"
            },
            PaletteDark = new PaletteDark()
            {
                Background = Colors.Gray.Darken4,
                AppbarBackground = Colors.Gray.Darken4,
                DrawerBackground = Colors.Gray.Darken4,
                AppbarText = Colors.Gray.Default,
                Surface = "#252525",
                Primary = Colors.Blue.Accent4
            },
        };

    private void DrawerToggle()
    {
        _isDrawerOpen = !_isDrawerOpen;
    }

    private bool IsActive(string href) =>
        Navigation.Uri.TrimEnd('/') == Navigation.ToAbsoluteUri(href).AbsoluteUri.TrimEnd('/');

    private void GoTo(string uri)
    {
        Navigation.NavigateTo(uri);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_mudThemeProvider != null)
            {
                var systemPreference = await _mudThemeProvider.GetSystemPreference();
                ThemeService.SetSystemPreference(systemPreference);

                await _mudThemeProvider.WatchSystemPreference(newValue =>
                {
                    ThemeService.SetSystemPreference(newValue);
                    StateHasChanged();
                    return Task.CompletedTask;
                });
            }

            ThemeService.ThemeChanged += (isDarkMode) =>
            {
                // Re-render pour appliquer le nouveau thème
                StateHasChanged();
            };

            Localizer.LanguageChanged += () =>
            {
                StateHasChanged();
            };

            DrawService.StatusChanged += () =>
            {
                StateHasChanged();
            };

            StateHasChanged();
        }
    }
}