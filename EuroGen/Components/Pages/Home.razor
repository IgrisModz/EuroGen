@page "/"

@inject DrawService DrawService
@inject ILogger<Draw> Logger
@inject LocalizationService Localizer

<PageTitle>@Localizer["Draws"]</PageTitle>

@if (DrawService.IsLoading)
{
    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudPaper Class="rounded-xl mb-4 d-flex justify-center" Elevation="24" Height="160px" Width="100%" MaxWidth="440px">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Pulse" Height="Auto" Width="100%" Class="ma-3 rounded-xl" />
        </MudPaper>
    </MudStack>

    @if (Preferences.Get("LastMethodUsed", "") != "GetBestDraw")
    {
        @for (var i = 0; i < DrawLength; i++)
        {
            <MudPaper Class="@($"pa-4 {(i != DrawLength - 1 ? "mb-4" : "")} rounded-xl d-flex justify-center gap-2 flex-wrap")" Elevation="24">
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
            </MudPaper>
        }
    }
    else
    {
        <MudPaper Class="pa-4 rounded-xl d-flex justify-center gap-2 flex-wrap" Elevation="24">
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="50px" Width="50px" />
        </MudPaper>
    }

    <MudGrid Spacing="2" Class="mt-2">
        <MudItem xs="12" sm="6">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Class="rounded-xl" Height="37px" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Class="rounded-xl" Height="37px" />
        </MudItem>
    </MudGrid>
}
else
{
    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudPaper Class="rounded-xl mb-4 d-flex justify-center" Elevation="24" Height="160px" Width="100%" MaxWidth="440px">
            <MudImage ObjectFit="ObjectFit.Contain" Fluid="true" Src="images/banner.png" Alt="eurogen banner" Class="mx-5"/>
        </MudPaper>
    </MudStack>

    @foreach (var draw in _newDraws)
    {
        <MudPaper Class="@($"{(!draw.Equals(_newDraws.Last()) ? "mb-4" : "")} rounded-xl")" Elevation="24">
            <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Spacing="2" Class="pa-4 rounded-lg">
                <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Spacing="2">
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="draw-item">
                        <MudIcon Color="Color.Primary" Icon="@Icons.Material.Filled.Circle" class="draw-icon" />
                        <MudText Align="Align.Center" Class="draw-text ball-text"><b>@draw.FirstNumber</b></MudText>
                    </MudStack>
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="draw-item">
                        <MudIcon Color="Color.Primary" Icon="@Icons.Material.Filled.Circle" class="draw-icon" />
                        <MudText Align="Align.Center" Class="draw-text ball-text"><b>@draw.SecondNumber</b></MudText>
                    </MudStack>
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="draw-item">
                        <MudIcon Color="Color.Primary" Icon="@Icons.Material.Filled.Circle" class="draw-icon" />
                        <MudText Align="Align.Center" Class="draw-text ball-text"><b>@draw.ThirdNumber</b></MudText>
                    </MudStack>
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="draw-item">
                        <MudIcon Color="Color.Primary" Icon="@Icons.Material.Filled.Circle" class="draw-icon" />
                        <MudText Align="Align.Center" Class="draw-text ball-text"><b>@draw.FourthNumber</b></MudText>
                    </MudStack>
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="draw-item">
                        <MudIcon Color="Color.Primary" Icon="@Icons.Material.Filled.Circle" class="draw-icon" />
                        <MudText Align="Align.Center" Class="draw-text ball-text"><b>@draw.FifthNumber</b></MudText>
                    </MudStack>
                </MudStack>
                <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap" Spacing="2">
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="draw-item">
                        <MudIcon Icon="@Icons.Material.Filled.Star" class="draw-icon star-icon" />
                        <MudText Align="Align.Center" Color="Color.Dark" Class="draw-text"><b>@draw.FirstStar</b></MudText>
                    </MudStack>
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="draw-item">
                        <MudIcon Icon="@Icons.Material.Filled.Star" class="draw-icon star-icon" />
                        <MudText Align="Align.Center" Color="Color.Dark" Class="draw-text"><b>@draw.SecondStar</b></MudText>
                    </MudStack>
                </MudStack>
            </MudStack>
        </MudPaper>
    }

    <MudGrid Class="mt-2" Spacing="2">
        <MudItem xs="12" sm="6">
            <MudButton Color="Color.Primary" Variant="Variant.Filled"
            Style="@($"text-transform:none;")"
            Class="rounded-xl"
            FullWidth="true"
            OnClick="async () => await GenerateDraw()">@Localizer["Draw"]</MudButton>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudButton Color="Color.Primary" Variant="Variant.Filled"
            Style="@($"text-transform:none;")"
            Class="rounded-xl"
            FullWidth="true"
            OnClick="async () => await GetBestDraw()">@Localizer["GetBestDraw"]</MudButton>
        </MudItem>
    </MudGrid>
}

<style>
    .draw-item {
    position: relative;
    font-size: 1.8em;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-weight: bold;
    width: 50px;
    height: 50px;
    }

    .draw-icon {
    width: 120%;
    height: 120%;
    }

    .star-icon {
    color: #FFB300;
    }

    .draw-text {
    position: absolute;
    }

    .ball-text {
    color: #fff;
    }
</style>

@code {
    private List<Draw> _newDraws = [];

    private int DrawLength => Preferences.Default.Get("DrawLength", 1);
    private int SelectedMinYear => Preferences.Default.Get("MinDate", _years[0]);
    private int SelectedMaxYear => Preferences.Default.Get("MaxDate", _years[^1]);
    private CalculDrawType SelectedCalculType => (CalculDrawType)Preferences.Default.Get("DrawCalcul", (int)CalculDrawType.TotalDraw);

    private List<int> _years = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        DrawService.IsLoading = true;

        _newDraws = LoadPreviouslyGenratedDraws();

        if (DrawService.Draws == null || !DrawService.Draws.Any())
        {
            DrawService.Draws = await DrawService.LoadDraws();
        }

        _years = DrawService.Draws?.Select(d => d.DrawDate.Year).Distinct().Order().ToList() ?? new List<int>();


        DrawService.IsLoading = false;
    }

    private List<Draw> LoadPreviouslyGenratedDraws()
    {
        string serializedDraws = Preferences.Default.Get("Draws", "");
        var draws = DeserializeDraws(serializedDraws);

        if (draws.Count == 0)
        {
            draws.Add(new Draw()
                {
                    DrawDate = DateTime.Now
                });
        }

        return draws;
    }

    private string SerializeDraws(List<Draw> draws)
    {
        // Sérialiser les tirages pour les enregistrer dans Preferences
        return System.Text.Json.JsonSerializer.Serialize(draws);
    }

    private List<Draw>? DeserializeDraws(string serializedDraws)
    {
        // Désérialiser les tirages depuis Preferences
        return string.IsNullOrEmpty(serializedDraws) ? new List<Draw>() : System.Text.Json.JsonSerializer.Deserialize<List<Draw>>(serializedDraws);
    }

    private async Task GenerateDraw()
    {
        DrawService.IsLoading = true;

        try
        {
            Logger.LogInformation("Début du tirage...");
            var length = DrawLength;
            _newDraws.Clear();
            var totalDraw = SelectedCalculType is CalculDrawType.TotalDraw or CalculDrawType.TotalDrawByNumber;

            if (SelectedCalculType is CalculDrawType.TotalDraw or CalculDrawType.TotalNumber)
            {
                var numbersPercentages = await GetPercents([
                    nameof(Draw.FirstNumber),
        nameof(Draw.SecondNumber),
        nameof(Draw.ThirdNumber),
        nameof(Draw.FourthNumber),
        nameof(Draw.FifthNumber)
                ], SelectedMinYear, SelectedMaxYear, totalDraw);

                var starsPercentages = await GetPercents([nameof(Draw.FirstStar), nameof(Draw.SecondStar)], SelectedMinYear, SelectedMaxYear, totalDraw);

                for (var i = 0; i < length; i++)
                {
                    var numbers = GetDrawNumber(numbersPercentages, 5);

                    var stars = GetDrawNumber(starsPercentages, 2);

                    var firstNumber = numbers.FirstOrDefault();
                    var secondNumber = numbers.ElementAtOrDefault(1);
                    var thirdNumber = numbers.ElementAtOrDefault(2);
                    var fourthNumber = numbers.ElementAtOrDefault(3);
                    var fifthNumber = numbers.ElementAtOrDefault(4);
                    var firstStar = stars.FirstOrDefault();
                    var secondStar = stars.ElementAtOrDefault(1);

                    _newDraws.Add(new Draw
                        {
                            FirstNumber = firstNumber,
                            SecondNumber = secondNumber,
                            ThirdNumber = thirdNumber,
                            FourthNumber = fourthNumber,
                            FifthNumber = fifthNumber,
                            FirstStar = firstStar,
                            SecondStar = secondStar,
                        });

                    await Task.Delay(200);
                }
            }
            else
            {
                var number1Percentages = await GetPercents([nameof(Draw.FirstNumber)], SelectedMinYear, SelectedMaxYear, totalDraw);
                var number2Percentages = await GetPercents([nameof(Draw.SecondNumber)], SelectedMinYear, SelectedMaxYear, totalDraw);
                var number3Percentages = await GetPercents([nameof(Draw.ThirdNumber)], SelectedMinYear, SelectedMaxYear, totalDraw);
                var number4Percentages = await GetPercents([nameof(Draw.FourthNumber)], SelectedMinYear, SelectedMaxYear, totalDraw);
                var number5Percentages = await GetPercents([nameof(Draw.FifthNumber)], SelectedMinYear, SelectedMaxYear, totalDraw);

                var star1Percentages = await GetPercents([nameof(Draw.FirstStar)], SelectedMinYear, SelectedMaxYear, totalDraw);
                var star2Percentages = await GetPercents([nameof(Draw.SecondStar)], SelectedMinYear, SelectedMaxYear, totalDraw);


                for (var i = 0; i < length; i++)
                {
                    var numbers = GetDrawNumbers([number1Percentages, number2Percentages, number3Percentages, number4Percentages, number5Percentages]);

                    var stars = GetDrawNumbers([star1Percentages, star2Percentages]);

                    var firstNumber = numbers.FirstOrDefault();
                    var secondNumber = numbers.ElementAtOrDefault(1);
                    var thirdNumber = numbers.ElementAtOrDefault(2);
                    var fourthNumber = numbers.ElementAtOrDefault(3);
                    var fifthNumber = numbers.ElementAtOrDefault(4);
                    var firstStar = stars.FirstOrDefault();
                    var secondStar = stars.ElementAtOrDefault(1);

                    _newDraws.Add(new Draw
                        {
                            FirstNumber = firstNumber,
                            SecondNumber = secondNumber,
                            ThirdNumber = thirdNumber,
                            FourthNumber = fourthNumber,
                            FifthNumber = fifthNumber,
                            FirstStar = firstStar,
                            SecondStar = secondStar,
                        });

                    await Task.Delay(200);
                }
            }


            Preferences.Set($"Draws", SerializeDraws(_newDraws));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erreur lors du chargement.");
        }
        finally
        {
            DrawService.IsLoading = false;
            Preferences.Set("LastMethodUsed", "GetDraw");
        }
    }

    private async Task GetBestDraw()
    {
        DrawService.IsLoading = true;

        try
        {
            Logger.LogInformation("Début du meilleur tirage...");
            _newDraws.Clear();
            var totalDraw = SelectedCalculType is CalculDrawType.TotalDraw or CalculDrawType.TotalDrawByNumber;

            if (SelectedCalculType is CalculDrawType.TotalDraw or CalculDrawType.TotalNumber)
            {
                var numbersPercentages = await GetPercents([
                    nameof(Draw.FirstNumber),
        nameof(Draw.SecondNumber),
        nameof(Draw.ThirdNumber),
        nameof(Draw.FourthNumber),
        nameof(Draw.FifthNumber)
                ], SelectedMinYear, SelectedMaxYear, totalDraw, OrderBy.ValueDescending);

                var starsPercentages = await GetPercents([nameof(Draw.FirstStar), nameof(Draw.SecondStar)], SelectedMinYear, SelectedMaxYear, totalDraw, OrderBy.ValueDescending);

                var firstNumber = numbersPercentages.FirstOrDefault().Key;
                var secondNumber = numbersPercentages.ElementAtOrDefault(1).Key;
                var thirdNumber = numbersPercentages.ElementAtOrDefault(2).Key;
                var fourthNumber = numbersPercentages.ElementAtOrDefault(3).Key;
                var fifthNumber = numbersPercentages.ElementAtOrDefault(4).Key;
                var firstStar = starsPercentages.FirstOrDefault().Key;
                var secondStar = starsPercentages.ElementAtOrDefault(1).Key;

                _newDraws.Add(new Draw
                    {
                        FirstNumber = firstNumber,
                        SecondNumber = secondNumber,
                        ThirdNumber = thirdNumber,
                        FourthNumber = fourthNumber,
                        FifthNumber = fifthNumber,
                        FirstStar = firstStar,
                        SecondStar = secondStar,
                    });

                await Task.Delay(200);
            }
            else
            {
                var number1Percentages = await GetPercents([nameof(Draw.FirstNumber)], SelectedMinYear, SelectedMaxYear, totalDraw, OrderBy.ValueDescending);
                var number2Percentages = await GetPercents([nameof(Draw.SecondNumber)], SelectedMinYear, SelectedMaxYear, totalDraw, OrderBy.ValueDescending);
                var number3Percentages = await GetPercents([nameof(Draw.ThirdNumber)], SelectedMinYear, SelectedMaxYear, totalDraw, OrderBy.ValueDescending);
                var number4Percentages = await GetPercents([nameof(Draw.FourthNumber)], SelectedMinYear, SelectedMaxYear, totalDraw, OrderBy.ValueDescending);
                var number5Percentages = await GetPercents([nameof(Draw.FifthNumber)], SelectedMinYear, SelectedMaxYear, totalDraw, OrderBy.ValueDescending);

                var star1Percentages = await GetPercents([nameof(Draw.FirstStar)], SelectedMinYear, SelectedMaxYear, totalDraw, OrderBy.ValueDescending);
                var star2Percentages = await GetPercents([nameof(Draw.SecondStar)], SelectedMinYear, SelectedMaxYear, totalDraw, OrderBy.ValueDescending);

                var firstNumber = number1Percentages.FirstOrDefault().Key;
                var secondNumber = number2Percentages.FirstOrDefault().Key;
                var thirdNumber = number3Percentages.FirstOrDefault().Key;
                var fourthNumber = number4Percentages.FirstOrDefault().Key;
                var fifthNumber = number5Percentages.FirstOrDefault().Key;
                var firstStar = star1Percentages.FirstOrDefault().Key;
                var secondStar = star2Percentages.FirstOrDefault().Key;

                _newDraws.Add(new Draw
                    {
                        FirstNumber = firstNumber,
                        SecondNumber = secondNumber,
                        ThirdNumber = thirdNumber,
                        FourthNumber = fourthNumber,
                        FifthNumber = fifthNumber,
                        FirstStar = firstStar,
                        SecondStar = secondStar,
                    });

                await Task.Delay(200);
            }

            Preferences.Set($"Draws", SerializeDraws(_newDraws));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erreur lors du chargement.");
        }
        finally
        {
            DrawService.IsLoading = false;
            Preferences.Set("LastMethodUsed", "GetBestDraw");
        }
    }

    private async Task<IDictionary<int, double>> GetPercents(string[] propertyNames, int minYear, int maxYear, bool totalDraw = false, OrderBy order = OrderBy.None)
    {
        var filteredDraws = (DrawService.Draws ?? Array.Empty<Draw>()).Where(d => d.DrawDate.Year >= minYear && d.DrawDate.Year <= maxYear).ToList();

        var values = filteredDraws.SelectMany(d => propertyNames.Select(d.GetPropertyValue)).ToList();

        var counts = await Task.Run(values.CalculateNumbers);

        var distinctDates = filteredDraws.Select(d => d.DrawDate).Distinct().Count();

        var percentages = await Task.Run(() => counts.CalculateNumbersPercent(totalDraw ? distinctDates : null));

        return percentages.ReorderBy(order);
    }

    private static HashSet<int> GetDrawNumbers(IEnumerable<IDictionary<int, double>> probabilities)
    {
        var uniqueValues = new HashSet<int>();
        var i = 0;
        List<int> exist = [];
        var enumerable = probabilities as IDictionary<int, double>[] ?? probabilities.ToArray();
        while (uniqueValues.Count < enumerable.Count())
        {
            var count = uniqueValues.Count;
            if (i > enumerable.Count())
            {
                i = 0;
            }

            if (!exist.Contains(i))
            {
                uniqueValues.Add(GetDrawNumber(enumerable.ElementAt(i), 1).ElementAt(0));
            }

            if (uniqueValues.Count > count)
            {
                exist.Add(i);
            }

            i++;
        }

        return uniqueValues;
    }

    private static HashSet<int> GetDrawNumber(IDictionary<int, double> probabilities, int returnLength)
    {
        var uniqueValues = new HashSet<int>();
        while (uniqueValues.Count < returnLength)
        {
            var randomNumber = GetSecureRandomDouble();
            var cumulative = 0.0;
            var value = probabilities.First().Key;
            foreach (var kvp in probabilities)
            {
                cumulative += kvp.Value / 100;
                if (!(randomNumber < cumulative)) continue;
                value = kvp.Key;
                break;
            }

            uniqueValues.Add(value);
        }

        return uniqueValues;
    }

    private static double GetSecureRandomDouble()
    {
        var byteArray = new byte[8];
        RandomNumberGenerator.Fill(byteArray);
        var randomNumber = BitConverter.ToUInt64(byteArray, 0);
        return randomNumber / (1.0 + ulong.MaxValue);
    }
}